function outputSingles = CdReadSingles(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   OUTPUTSINGLES = IMPORTFILE(FILENAME)
%   Reads data from text file FILENAME for the default selection.
%
%   OUTPUTSINGLES = IMPORTFILE(FILENAME, STARTROW, ENDROW)
%   Reads data from rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   outputSingles = importfile('output_Singles.dat', 1, 147995);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2022/10/31 10:46:42

%% Initialize variables.
if nargin<=2
    startRow = 1;
    endRow = inf;
end

%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: double (%f)
%   column9: double (%f)
%	column10: double (%f)
%   column11: double (%f)
%	column12: double (%f)
%   column13: double (%f)
%	column14: double (%f)
%   column15: double (%f)
%	column16: double (%f)
%   column17: double (%f)
%	column18: double (%f)
%   column19: double (%f)
%	column20: double (%f)
%   column21: double (%f)
%	column22: double (%f)
%   column23: text (%s)
%	column24: text (%s)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%8f%8f%6f%11f%11f%11f%6f%6f%6f%6f%6f%6f%6f%32f%11f%11f%11f%11f%5f%5f%5f%5f%5s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this code. If an error occurs for a different file, try regenerating the code from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', '', 'WhiteSpace', '', 'TextType', 'string', 'EmptyValue', NaN, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', '', 'WhiteSpace', '', 'TextType', 'string', 'EmptyValue', NaN, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Remove white space around all cell columns.
dataArray{23} = strtrim(dataArray{23});
dataArray{24} = strtrim(dataArray{24});

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post processing code is included. To generate code which works for unimportable data, select unimportable cells in a file and regenerate the script.

%% Create output variable
outputSingles = table(dataArray{1:end-1}, 'VariableNames', {'ID_run','ID_event','ID_source','source_X','source_Y','source_Z','volume_ID_1','volume_ID_2','volume_ID_3','volume_ID_4','volume_ID_5','volume_ID_6','volume_ID_7','timestamp','energy_dep','X','Y','Z','num_compton_phantom','num_compton_detector','num_rayleigh_phantom','num_rayleigh_detector','phantom_name_compton','phantom_name_rayleigh'});

